package com.trs.template.dao.greendao;

import java.util.List;
import com.trs.template.dao.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String tel;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String password;
    private java.util.Date create_time;
    private java.util.Date last_login_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Beacon> beaconList;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String tel, String name, String password, java.util.Date create_time, java.util.Date last_login_time) {
        this.id = id;
        this.tel = tel;
        this.name = name;
        this.password = password;
        this.create_time = create_time;
        this.last_login_time = last_login_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTel() {
        return tel;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTel(String tel) {
        this.tel = tel;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    public java.util.Date getCreate_time() {
        return create_time;
    }

    public void setCreate_time(java.util.Date create_time) {
        this.create_time = create_time;
    }

    public java.util.Date getLast_login_time() {
        return last_login_time;
    }

    public void setLast_login_time(java.util.Date last_login_time) {
        this.last_login_time = last_login_time;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Beacon> getBeaconList() {
        if (beaconList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BeaconDao targetDao = daoSession.getBeaconDao();
            List<Beacon> beaconListNew = targetDao._queryUser_BeaconList(id);
            synchronized (this) {
                if(beaconList == null) {
                    beaconList = beaconListNew;
                }
            }
        }
        return beaconList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBeaconList() {
        beaconList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
